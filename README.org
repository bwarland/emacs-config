#+title: konfigurering av emacs
#+property: 
#+startup: overview num
* kilder og forbilder
** gode eksempler
*** [[http://doc.norang.ca/org-mode.html][bernt hansen sin emacs-konfigurering]]
den første emacskonfigurasjonen jeg kopierte mer eller mindre alt av og testet den gang jeg var rimelig fersk. og ennå så tror jeg store deler av org-mode konfigurasjonen min bygger på hans oppsett. dette er en kar som har rimelig god kontroll over verktøyet emacs. 

sett bort fra det at hans arbeidsflyt ikke helt passer min - til det er den litt for regimentert - så er det at hav av gode eksempler her. det var med denne jeg først lærte å bruke emacs og org-mode for noen år siden. 
*** [[http://ehneilsen.net/notebook/orgexamples/org-examples.html#sec-23-1][org-mode cookbook]]
*** [[https://jamiecollinson.com/blog/my-emacs-config/][jamiecollisonemacsconfig]]
*** [[https://gitlab.com/kaligule/emacs-config/-/blob/master/config.org][kaligule]]
har en egendefinert funksjon for omlasting av konfigurasjonsfil som kan være vært å implementere.
* pakker og lasting av konfigurasjonsfiler
konfigurasjon knyttet til moduler og pakker. 
** generell konfigurering inkludert pakkearkiv
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/pakker.el"
  (setq package-enable-at-startup nil)
  (package-initialize)
  (cond ((eq system-type 'windows-nt) (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/"))))
        ((eq system-type 'gnu/linux) (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                                                              ;; ("marmalade" . "https://marmalade-repo.org/packages/")
                                                              ("org" . "https://orgmode.org/elpa/")
                                                              ("melpa" . "https://melpa.org/packages/")
                                                            ))))
#+end_src

** [[https://github.com/jwiegley/use-package][use-package]] 
denne pakken er laget for det å samle konfigurasjon knyttet til en pakke, og på det viset legge opp til en ryddigere konfigurasjonfil, og man kan kontrollere lasting av pakker slik at man kan korte ned på oppstartstid for emacs.
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/pakker.el"
  (eval-when-compile
    (require 'use-package))

  (setq use-package-always-ensure t
        ;; use-package-always-ensure t
        use-package-verbose nil
        use-package-expand-minimally t
        use-package-enable-imenu-support t
      
        )
#+end_src
** quelpa
dette er en pakke som brukes for å bygge pakker fra lokal eller ekstern kilde. quelpa funksjonen nederst som viser til "https://GitHub.com/l3kn/org-fc" (dette er org flashcards) er jeg litt usikker hvorfor jeg har lagt inn, jeg kan ikke huske når denne kom til verden. og reelt sett så skulle vel denne kommandoen kjøres kun en gang i det at man neppe trenger å laste ned org-flash hver gang man starter opp emacs.
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/pakker.el"
  (unless (package-installed-p 'quelpa)
    (with-temp-buffer
      (url-insert-file-contents "https://raw.GitHubusercontent.com/quelpa/quelpa/master/quelpa.el")
      (eval-buffer)
      (quelpa-self-upgrade)))
  ;; (quelpa '(discover-my-major :fetcher git :url "https://GitHub.com/l3kn/org-fc"))
#+end_src
** automatisk oppdatering
for periodisk, automatisk oppdatering av emacs-pakker. denne fant jeg i dave wilson sin youtube-snutt https://www.youtube.com/watch?v=dtjq68f2dxw&t=839s. 
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/pakker.el"
  (use-package auto-package-update
    :defer t
    :custom
    (auto-package-update-interval 14)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00")
    )
#+end_src
* generelt
en samling av ulik konfigurasjon knyttet til hvordan emacs ser ut og hvordan emacs generelt fungerer.
** utseende
*** meny
jeg synes at menyer generelt sett i emacs gir visuell støy. og hva oppstartsbeskjeder angår så forstår jeg lite av disse. derfor slår jeg av det meste. 
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"
    (when window-system
      (tooltip-mode -1)
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1))
  (setq inhibit-startup-message t)
  ;; (set-fringe-mode 0)
  (setq visible-bell t)
  (global-visual-line-mode t)
  (display-time-mode 1)
#+end_src
*** maskinspesifik generell konfigurasjon
**** basis font
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"
  (cond ((eq system-type 'windows-nt) (set-frame-font "consolas-14"))
        ((string= system-name "macebell") (set-frame-font "liberation mono-15"))
        ((string= system-name "kbell") (set-frame-font "liberation mono-11"))
        ((string= system-name "ingentingen") (set-frame-font "liberation mono-12")))
#+end_src
*** doom modeline
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config (setq doom-modeline-bar-height 25
                  doom-modeline-bar-width 3
                  doom-modeline-buffer-encoding t
                  doom-modeline-workspace-name t))
  ;; (use-package doom-themes
    ;; :init (load-theme 'doom-palenight t))
#+end_src
** forskjellig
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"
  (put 'downcase-region 'disabled nil)
  (set-language-environment "utf-8")
  (require 'rainbow-delimiters)
  ;; (rainbow-delimiters-mode 1)
#+end_src
** tekstkontroll
*** forkortelser
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"
(setq abbrev-file-name "~/.emacs.d/abbrev_defs")
(setq save-abbrevs 'silent)
(setq-default abbrev-mode t)
#+end_src
*** tekstmarkering
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"
    (use-package hi-lock
      :defer t
      :bind (("M-o l" . highlight-lines-matching-regexp)
             ("M-o r" . highlight-regexp)
             ("M-o w" . highlight-phrase)))
#+end_src
** visning av kommandoer
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"
  (use-package command-log-mode
    :defer t
    :bind
    ("C-c <f10>" . clm/toggle-command-log-buffer)
    :config
    (global-command-log-mode t))
#+end_src
** oppstart av emacs
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"
(emacs-init-time)
;; use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(setq gc-cons-threshold (* 50 1000 1000))
#+end_src
** legg til når emacs laster
denne filen har jeg lastet ned i fra GitHub og det er noe jeg trenger for å få org-babel til å kjøre programmeringsspråket racket.
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"
(add-to-list 'load-path "~/.emacs.d/ob-racket-master/")
#+end_src
** stavekontroll
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"
  (setq ispell-program-name "hunspell")
        ;; ispell-hunspell-dict-path-alist '((/usr/share/doc/hunspell-no))

#+end_src
* fullføring
** helm 
*** [[https://emacs-helm.github.io/helm/#introduction][generelt]]
pakke som lager et rammeverk for søking og innsnevring av valg og for det å fullføre navn på filer og kommandoer og så videre. 
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/helm-konf.el"
  (use-package helm
    :ensure t
    :bind (
           ;; ("M-x" . helm-m-x)
           ("C-x c-f" . helm-find-files)
           ("C-x f" . helm-recentf)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-buffers-list)	;
           ("C-x c y" . helm-yas-complete)
           ("C-x c y" . helm-yas-create-snippet-on-region)
           ("C-c h o" . helm-occur)
           ("C-c h x" . helm-register)
           ("C-c <f9>" . helm-calcul-expression)
           ("C-c <f1>" . helm-colors)
           ("M-p" . helm-previous-line)
           ("M-k" . helm-next-line)
           ("M-i" . helm-previous-page)
           ("M-k" . helm-next-page)
           ("M-h" . helm-beginning-of-buffer)
           ("M-h" . helm-end-of-buffer)
           )
    :init
    (setq helm-buffers-lazy-matching t
          helm-recentf-fuzzy-match t
          helm-locate-fuzzy-match t
          helm-split-window-in-side-p t
          helm-lisp-fuzzy-completion t
          helm-autoresize-max-height 0
          helm-autoresize-min-height 20)
    :config
    (ido-mode -1)
    (helm-mode 1)
    (helm-autoresize-mode 1))
  (when (eq system-type 'gnu/linux) (use-package helm-ls-git
                                      :after helm
                                      :bind (("C-x c-d" . helm-browse-project)
                                             ("C-x r p" . helm-projects-history))))
#+end_src
*** swiper-helm
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/helm-konf.el"
(use-package swiper-helm
  :ensure t
  :bind ("C-s" . swiper-helm))
#+end_src
* flermarkør
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/flere-markører.el"
    (use-package multiple-cursors
      :defer t
      :bind
      (
       ("C-c m t" . mc/mark-all-like-this)
       ("C-c m l" . mc/edit-lines)
       ("C-c m e" . mc/edit-end-of-lines)
       ("C-c m a" . mc/edit-beginning-of-lines)
       ("C-c m n" . mc/edit-next-line-like-this)
       ("C-c m p" . mc/edit-previous-like-this)
       ("C-c m r" . set-rectangular-region-anchor)))
#+end_src
* programmering
** python

#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/programmering.el"
  ;; (setq python-shell-completion-native-enable nil) 
  (setq python-shell-interpreter "/home/bwarland/anaconda3/bin/python3")
#+end_src
** racket
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/programmering.el"
  (use-package racket-mode
    :defer t
    :config
    (when (eq system-type 'windows-nt) ((setq racket-racket-program "c:\\program files\\racket\\racket.exe"
                                              racket-raco-program "c:\\program files\\racket\\raco.exe"))))
(require 'ob-racket)
#+end_src

** sqlite
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/programmering.el"
  (setq sql-sqlite-program "/home/bwarland/anaconda3/bin/sqlite3")
#+end_src
* org-mode
alle moduler og pakker som har med org-mode å gjøre.

alle org-mode-konfigureringers mor: [[http://doc.norang.ca/org-mode.html][bernt hansen sin konfigurasjonsfil]].
** generelt
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"
          (use-package org
            :mode (("\\.org$" . org-mode))
            :hook (org-mode . org-bullets-mode)
            :bind
            (("C-c o" . 'org-mode)
             ("C-c c" . 'org-capture)
             ("<f5>" . 'org-copy-subtree)
             ("C-c a" . 'org-agenda)
             ("C-c l" . 'org-store-link)
             ("C-c C-." . org-time-stamp)
             ("C-c C-t". 'org-todo)		;
             ("C-c t" . 'org-show-todo-tree)
             ("C-c C-w" . 'org-capture-refile)
             ("C-c C-k" . 'org-capture-kill))
            :config
            (setq org-hide-leading-stars t
                  org-startup-indented t
                  org-startup-folded t
                  ;; org-switch-to-buffer-other-window t
                  initial-major-mode 'org-mode
                  org-pretty-entities t
                  org-pretty-entities-include-sub-superscripts nil
                  org-use-fast-todo-selection t
                  org-treat-s-cursor-todo-selection-as-state-change nil
                  org-directory "~/GitHub"
                  org-reverse-note-order nil
                  org-refile-use-outline-path t 
                  org-outline-path-complete-in-steps nil
                  org-refile-allow-creating-parent-nodes (quote confirm)
                  org-indirect-buffer-display 'current-window
                  org-hide-emphasis-markers t
                  org-tags-column -50
                  org-hide-emphasis-marker t
                  ;; org-list-allow-alphabetcial t
                  org-ellipsis " ..."
                  ;; org-archive-location "~/documents/org-arkiv/arkiv.org::* task"
                  ;; org-todo-keywords (quote (
                  ;;                           (sequence "todo(t)" "next(n)" "data(d)" "pres(p)" "bal(b)"  "|" "done(d)")
                  ;;                           ))
                  ;; org-todo-keyword-faces (quote (("todo" :foreground "red" :background "white")
                  ;;                                ("next" :foreground "blue" :background "white")
                  ;;                                ("data" :foreground "light slate grey" :background "white")
                  ;;                                ("pres" :foreground "dark turquoise" :background "white")
                  ;;                                ("bal" :foreground "dark olive green" :background "white")
                  ;;                                ("done" :foreground "dark green" :background "white")))
                  ;;
                  ))

  (cond ((eq system-type 'windows-nt) (setq org-archive-location "~/c:users/bjorwa/documents/org-arkiv/arkiv.org::* task"))
        ((eq system-type 'gnu/linux) (setq org-archive-location "~/documents/org-arkiv/arkiv.org::* task")))
#+end_src
** startmappe
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el" 
(cond ((eq system-type 'windows-nt) (setq default-directory "~/c:users/bjorwa/documents/GitHub/"))
      ((eq system-type 'gnu/linux) (setq default-directory "~/GitHub/")))
#+end_src
** agenda
*** agenda-files
disse kan man legge automatisk inn i .emacs med kommandoen c-[ (og ta ut med c-]). men jeg ser behov for å kunne ha et samlet syn på dette på tvers av tre maskiner (to linux-maskiner og en windows-maskin).

#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/agenda-files.el"
  ;; (cond ((eq system-type 'windows-nt) 
  ;;        (setq mjo "~/:c/users/bjorwa/documents/GitHub/markedsanalyse/journaler/"
  ;;              not "~/:c/users/bjorwa/documents/GitHub/markedsanalyse/notater/"))
  ;;       ((eq system-type 'gnu/linux) 
  ;;        (setq mjo "~/GitHub/markedsanalyse/journaler/"
  ;;              not "~/GitHub/markedsanalyse/notater/")))
  ;; (setq org-agenda-files (concat mjo "energi-master.org"))
  ;; ;; (setq org-agenda-files (concat mjo "balanser.org"))
  ;;                         (concat mjo "presentasjoner.org")
  ;;                         (concat mjo "liq.org")
  ;;                        (concat mjo "bd.org")
  ;;                         (concat mjo "pk.org")
  ;;                         (concat mjo "journal.org")
  ;;                         (concat not "informatikk.org")
  ;;                         (concat not "ferdigheter.org"))

  ;; (setq org-agenda-files '("~/GitHub/markedsanalyse/journaler/energi-master.org"
  ;;                           "~/GitHub/markedsanalyse/journaler/balanse.org"
  ;;                           "~/GitHub/markedsanalyse/journaler/presentasjoner.org"
  ;;                           "~/GitHub/markedsanalyse/journaler/liq.org"
  ;;                           "~/GitHub/markedsanalyse/journaler/bd.org"
  ;;                           "~/GitHub/markedsanalyse/journaler/pk.org"
  ;;                           "~/GitHub/notater/samfunndrill.org"
  ;;                           "~/GitHub/markedsanalyse/journaler/journal.org" 
  ;;                           "~/GitHub/notater/moeter.org" 
  ;;                           "/home/bwarland/GitHub/notater/informatikk.org"
  ;;                           "~/GitHub/notater/ferdigheter.org"))
#+end_src
*** org-agenda
ingen endring mulig i agendabuffer, men man kan gå fra agendabuffer til filene som det henvises til, og det er mulig å endre disse filene fra agendabufferen.

dersom man ønkser å beholde vindusoppsettet slik man har det når man påkaller agendabufferen så må man sette følgende variabel: (setq org-agenda-window-setup 'current-buffer).

det er ryddig å se todo i sammenheng med "scheduled:" og "deadline:" ellers så risikerer man at hele todo-listen blir kleiset rett inn under "time-grid", dvs. når man bruker aktiv data. 
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-agenda.el"
  (setq org-agenda-columns t
        org-agenda-tags-column -100
        org-agenda-include-deadlines t
        org-agenda-compact-blocks t
        org-agenda-block-seperator t
        org-agenda-span 5
        org-agenda-window-setup 'other-window
        ;; agenda log
        org-agenda-start-with-log-mode t
        org-agenda-log-done 'note
        org-agenda-log-into-drawer t
              ;; time grid
        org-agenda-include-diary t
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-use-time-grid t
        org-agenda-sticky t
        org-agenda-time-grid (quote ((daily today remove-match)
                                     (0600 0800 1000 1200 1400 1600 1800)
                                     "      " "................")))
(add-hook 'after-init-hook 'org-agenda-list)
#+end_src
*** [[https://GitHub.com/alphapapa/org-super-agenda][org-super-agenda]] 
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-agenda.el"
  (require 'org-super-agenda)
  (use-package org-super-agenda
    :ensure t
    :config
    (org-super-agenda-mode 1)
    (setq org-super-agenda-groups
          '((:name "tidsplan     ========================================================================================"
                 :time-grid t)
	  
            (:name "sortering    ========================================================================================"
                 :todo "TODO")
            (:name "bearbeiding  ========================================================================================"
                 :todo "NEXT")
            (:name "dataoppdatering ====================================================================================="
                 :todo "DATA")
            (:name "presentasjoner ======================================================================================"
                   :todo "PRES")
            (:name "balanse      ========================================================================================"
                   :todo "BAL")
            (:name "marked       ========================================================================================"
                 :todo "TODO"
                 :tag ("coal" "hydrogen"))
            (:name "informatikk  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
                 :tag ("informatikk" "emacs" "git" "linux" "scheme" "python"))
            (:name "samfunnsfag  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
                   :tag ("samfunn" "økonomi"))
            )))

#+end_src
** filer mye brukt i omarkivering
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"
    (let ((wp "~/:c/users/bjorwa/documents/GitHub/markedsanalyse/journaler/")
          (lp "~/GitHub/markedsanalyse/journaler/"))
      (cond ((eq system-type 'windows-nt)
             (setq org-refile-targets (quote (((concat wp "arkiv.org") :maxlevel . 2)
                                              ((concat wp "liq.org") :maxlevel . 4)
                                              ((concat wp "reg.org") :maxlevel . 4)
                                              ((concat wp "master-energi.org.org") :maxlevel . 4)))))
            ((eq system-type 'gnu/linux)
             (setq org-refile-targets (quote (((concat lp "arkiv.org") :maxlevel . 2)
                                              ((concat lp "liq.org") :maxlevel . 4)
                                              ((concat lp "reg.org") :maxlevel . 4)
                                              ((concat lp "master-energi.org.org") :maxlevel . 4)))))))
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src
** hydra
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"
  (require 'org-fc-hydra)
#+end_src
** maler
*** fangstmaler
jeg bruker mange av disse fangstmalene både i arbeid og privat da det er noe som hjelper meg å samle, fange og lagre informasjon raskt. dette viser også konfigureringen, skjønt det kan bli noe graps i koden. 
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"
  (cond ((eq system-type 'windows-nt)
         (setq org-capture-templates
               (quote (
                       ("d" "drill/emner")
                       ("db" "powerbi" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "powerbi")
                        "** %? :drill:power_bi:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dd" "database" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "database")
                        "** %? :drill:db:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("de" "emacs config" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "emacs")
                        "** %? :drill:emacs:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dg" "GitHub" entry (file+olp "~/c:/users/bjorwa/documents/GitHub/notater/informatikk.org" "git")
                        "** %? :drill:git:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("di" "informatikk" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "informatikk")
                        "** %? :drill:informatikk:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dl" "linux" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "linux")
                        "** %? :drill:linux:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dn" "numpy" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "numpy")
                        "** %? :drill:python:\n:drill_card_type: twosided\n:end:\n# ")
                       ("do" "office" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "office")
                        "** %? :drill:office:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dp" "pandas" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "pandas")
                        "** %? :drill:python:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dp" "python" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "python")
                        "** %? :drill:python:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dr" "racket" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "racket")
                        "** %? :drill:scheme:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dx" "excel" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/informatikk.org" "racket")
                        "** %? :drill:excel:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("f" "fortelling og retorikk")
                       ("ff" "fortelling" entry (file+olp "~c:/users/bjorwa/documents/GitHub/notater/forret.org" "fortelling")
                        "* %?\n")
                       ("fr" "retorikk" entry (file+olp "~c:/users/bjorwa/documents/GitHub/notater/forret.org" "retorikk")
                        "* %?\n")
                       ("h" "handling/gjøremål")
                       ("hg" "gjøremål" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/moeter.org" "gjøremål")
                        "* todo %?\n%^t")
                       ("hm" "møter" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/moeter.org" "møter")
                        "* %?\n%^t")
                       ("j" "journal/føring")
                       ("jd" "dagbok" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub//GitHub/journal/dagbok.org")
                        "* %?\n")
                       ("jf" "fundamentals" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub//GitHub/markedsanalyse/journaler/fundamentals.org")
                        "* %?\nhjlink")
                       ("jf" "ferdigheter" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/ferdigheter.org")
                        "* %?\n")
                       ("jj" "journal" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub//GitHub/markedsanalyse/journaler/journal.org")
                        "* %?\nhjlink")
                       ("jr" "retorikk og kommunikasjon" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub/journal/retorikk.org")
                        "* %?\n")
                       ("jø" "økonomi" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub//GitHub/notater/econ.org")
                                       ("t" "tabell")
                       ("th" "handel" table-line (file+headline "~/notebook/markedsvurdering.org" "dagsrapport" "handel")
                        "|%^u|%^{type}|%^{selger}|%^{kjøper}|%^{periode}|%^{incoterm}|%^{pris}|%^{kilde}|%^{kommentar}|")
                        "* %?\n"))))
         )
        ((eq system-type 'gnu/linux)
         (setq org-capture-templates
               (quote (
                       ("d" "drill")
                       ("db" "powerbi" entry (file+olp "~/GitHub/notater/informatikk.org" "powerbi")
                        "** %? :drill:power_bi:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dd" "database" entry (file+olp "~/GitHub/notater/informatikk.org" "database")
                        "** %? :drill:db:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("de" "emacs config" entry (file+olp "~/GitHub/notater/informatikk.org" "emacs")
                        "** %? :drill:emacs:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dg" "GitHub" entry (file+olp "~/GitHub/notater/informatikk.org" "git")
                        "** %? :drill:git:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("di" "informatikk" entry (file+olp "~/GitHub/notater/informatikk.org" "informatikk")
                        "** %? :drill:informatikk:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dl" "linux" entry (file+olp "~/GitHub/notater/informatikk.org" "linux")
                        "** %? :drill:linux:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dn" "numpy" entry (file+olp "~/GitHub/notater/informatikk.org" "numpy")
                        "** %? :drill:python:\n:drill_card_type: twosided\n:end:\n# ")
                       ("do" "office" entry (file+olp "~/GitHub/notater/informatikk.org" "office")
                        "** %? :drill:office:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dp" "pandas" entry (file+olp "~/GitHub/notater/informatikk.org" "pandas")
                        "** %? :drill:python:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dp" "python" entry (file+olp "~/GitHub/notater/informatikk.org" "python")
                        "** %? :drill:python:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dr" "racket" entry (file+olp "~/GitHub/notater/informatikk.org" "racket")
                        "** %? :drill:scheme:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("ds" "samfunn" entry (file+olp "~/GitHub/notater/samfunndrill.org" "begreper")
                        "** %? :drill:samfunn:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("dx" "excel" entry (file+olp "~/GitHub/notater/informatikk.org" "racket")
                        "** %? :drill:excel:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")
                       ("f" "fortelling")
                       ("ff" "fortelling" entry (file+olp "~/GitHub/notater/forret.org" "fortelling")
                        "* %?\n")
                       ("fr" "retorikk" entry (file+olp "~/GitHub/notater/forret.org" "retorikk")
                        "* %?\n")
                       ("h" "handling")
                       ("hg" "gjøremål" entry (file+olp "~/GitHub/notater/moeter.org" "gjøremål")
                        "* todo %?\n%^t")
                       ("hm" "møter" entry (file+olp "~/GitHub/notater/moeter.org" "møter")
                        "* %?\n%^t")
                       ("j" "journal")
                       ("jd" "dagbok" entry (file+datetree+prompt "~/GitHub/journal/dagbok.org")
                        "* %?\n")
                       ("jf" "fundamentals" entry (file+datetree+prompt "~/GitHub/markedsanalyse/journaler/fundamentals.org")
                        "* %?\nhjlink")
                       ("jf" "ferdigheter" entry (file+datetree+prompt "~/GitHub/notater/ferdigheter.org")
                        "* %?\n")
                       ("jj" "journal" entry (file+datetree+prompt "~/GitHub/markedsanalyse/journaler/journal.org")
                        "* %?\nhjlink")
                       ("jr" "retorikk" entry (file+datetree+prompt "~/GitHub/journal/retorikk.org")
                        "* %?\n")
                       ("js" "samfunn" entry (file+datetree+prompt "~/GitHub/journal/samfunn.org")
                        "* %?\n")
                       ("jt" "trening" entry (file+datetree+prompt "~/GitHub/journal/trening.org")
                        "* %?\n")
                       ("jø" "økonomi" entry (file+datetree+prompt "~/GitHub/journal/econ.org") 
                        "* %?\n")
                       ("t" "tabell")
                       ("ta" "price quote agencies" table-line (file+olp "~/GitHub/markedsanalyse/journaler/daily-market-update.org" "lng") 
                        "|%^u|%^{platts}|%^{argus}|%^{icis}|" :prepend t)
                       ("tt" "trening" table-line (file+headline "~/GitHub/journal/trening.org" "tabell")
                        "|%^u|%^{type}|%^{oppvarming}|%^{runder}|%^{vekt}|%^{tid}|%^{kommentar}|")
                       )))))
#+end_src

*** strukturmal
f.eks <pyt + tab vil eksandere til python med tangle.
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("elt" . "src emacs-lisp :tangle"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("pyt" . "src python :tangle"))
  (add-to-list 'org-structure-template-alist '("sr" . "src racket"))
  (add-to-list 'org-structure-template-alist '("srt" . "src racket :tangle"))
#+end_src
** org-babel"
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"
  (org-babel-do-load-languages
   'org-babel-load-languages (quote ((emacs-lisp . t)
                                     (racket . t)
                                     (sqlite . t)
                                     (python . t))))
#+end_src

** terping
en strukturert terping av viktig informasjon, metoder og teknikker er viktig for meg da jeg har en teflonhjerne som ikke raskt absorberer. dette tror jeg er en pakke som ikke jevnlig oppdateres, om i det hele tatt. og her har jeg hatt litt problemer med en feilmelding og kluss med kode som jeg på et vil klarte å kontrollere ved å blokke ut noe av koden i modulens el-fil (laster denne inn i stedet for elc-filen, [[file:notater/ferdigheter.org::*feil under emacs-konfigurering][beskrivelse i filen ferdigheter.org]]).
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"
  (require 'org-drill)

  (use-package org-drill
    :ensure t
    ;; https://gitlab.com/phillord/org-drill/
    :config
    (setq org-drill-maximum-duration 20
          org-drill-spaced-repetition-algorithm 'sm2
          org-drill-add-random-noise-to-intervals-p t
          org-drill-adjust-intervals-for-early-and-late-repetitions-p t))
#+end_src
** TODO-nøkkelord
når man setter variabelen "org-use-fast-todo-selection" til "t" så vil man få en meny med todo-nøkkelord man kan velge i fra. 
#+begin_src emacs-lisp :tangle orgtodo.el
  (setq org-todo-fast-todo-selection t
        org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "DATA(D)" "PRES(p)" "BAL(b)" "|" "DONE(d)"))
        org-todo-keyword-faces (quote (("TODO" :foreground "red" :background "white")
                                       ("NEXT" :foreground "blue" :background "white")
                                       ("DATA" :foreground "light slate grey" :background "white")
                                       ("PRES" :foreground "dark turquoise" :background "white")
                                       ("BAL" :foreground "dark olive green" :background "white")
                                       ("DONE" :foreground "dark green" :background "white"))))
#+end_src
* maler
** yasnippet
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/maler.el"
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :init (yas-global-mode)
    :config
    (yas-global-mode)
    (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
    (setq yas-key-syntaxes '("w_" "w_." "^ "))
  ;;    (setq yas-installed-snippets-dir "~/elisp/yasnippet-snippets")
    (setq yas-expand-only-for-last-commands nil)
    (yas-global-mode 1)
    (bind-key "\t" 'hippie-expand yas-minor-mode-map)
    (add-to-list 'yas-prompt-functions 'shk-yas/helm-prompt)
    (global-set-key (kbd "C-c y") (lambda () (interactive)
                                    (yas/load-directory "~/elisp/snippets"))))
#+end_src

* register
** linux
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/linreg.el"
  (set-register ?d '(file . "~/GitHub/journal/dagbok.org"))
  (set-register ?t '(file . "~/GitHub/journal/trening.org"))
  (set-register ?c '(file . "~/GitHub/emacs-config/custom.el"))
  (set-register ?g '(file . "~/GitHub/"))
  (set-register ?f '(file . "~/GitHub/notater/ferdigheter.org"))
  (set-register ?k '(file . "~/GitHub/emacs-config/readme.org"))
  (set-register ?i '(file . "~/GitHub/notater/informatikk.org"))
  (set-register ?j '(file . "~/GitHub/markedsanalyse/journaler/journal.org")))
  (set-register ?l '(file . "~/GitHub/markedsanalyse/journaler/liq.org")))
  (set-register ?r '(file . "~/GitHub/markedsanalyse/journaler/reg.org")))
  (set-register ?e '(file . "~/.emacs")))
#+end_src
** windows
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/winreg.el"
  (set-register ?c '(file . "~/.emacs.d/custom.el"))
  ;; (set-register ?c '(file . "~/notebook/col.org"))
  ;; (set-register ?d '(file . "~/.emacs.d/snippets/org-mode/dayrep"))
  ;; (set-register ?e '(file . "~/.emacs"))
  (set-register ?j '(file . "c:\\users\\bjorwa\\documents\\GitHub\\markedsanalyse\\journaler\\journal.org"))
  (set-register ?f '(file . "c:\\users\\bjorwa\\documents\\GitHub\\markedsanalyse\\journaler\\fundamentals.org"))
  (set-register ?l '(file . "c:\\users\\bjorwa\\documents\\GitHub\\markedsanalyse\\journaler\\liq.org"))
  (set-register ?l '(file . "c:\\users\\bjorwa\\documents\\GitHub\\markedsanalyse\\journaler\\reg.org"))
  (set-register ?v '(file . "c:\\users\\bjorwa\\documents\\GitHub\\markedsanalyse\\journaler\\vedlikehold.org"))

  (set-register ?o '(file . "c:/users/bjorwa/appdata/roaming/notebook/oversikt.org"))
  (set-register ?m '(file . "c:/users/bjorwa/appdata/roaming/notebook/markedsvurdering.org"))
  (set-register ?p '(file . "c:/users/bjorwa/appdata/roaming/notebook/prices.org"))

  (set-register ?d '(file . "c:\\users\\bjorwa\\desktop\\"))
  (set-register ?g '(file . "c:\\users\\bjorwa\\documents\\GitHub\\"))

  ;; (set-register ?p '(file . "~/notebook/python.org"))
  ;; (set-register ?r '(file . "~/notebook/rapporter.org"))
  ;; (set-register ?r '(file . "~/.emacs.d/reg.el"))

    ;; (set-register ?c '(file . "~c:\\users\\bjorwa\\documents\\GitHub\\emacs-config\\custom.el"))
    ;;   (set-register ?g '(file . "~c:\\users\\bjorwa\\documents\\GitHub\\"))
    ;;   (set-register ?c '(file . "~c:\\users\\bjorwa\\documents\\GitHub\\notater\\ferdigheter.org"))
    ;;   (set-register ?k '(file . "~c:\\users\\bjorwa\\documents\\GitHub\\emacs-config\\readme.org"))
    ;;   (set-register ?i '(file . "~c:\\users\\bjorwa\\documents\\GitHub\\notater\\informatikk.org"))
    ;;   (set-register ?j '(file . "~c:\\users\\bjorwa\\documents\\GitHub\\markedsanalyse\\journaler\\informatikk.org"))
    ;;   (set-register ?l '(file . "~c:\\users\\bjorwa\\documents\\GitHub\\markedsanalyse\\journaler\\liq.org"))
    ;;   (set-register ?r '(file . "~c:\\users\\bjorwa\\documents\\GitHub\\markedsanalyse\\journaler\\reg.org"))
    ;;   (set-register ?e '(file . "~c:\\users\\bjorwa\\appdata\\roaming\\.emacs"))
#+end_src
* kommandoer og tastebinding
samling av kommandoer og tastebindinger som ikke nødvendigvis knyttes mot en emacs-pakke.
#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/gkb.el"
(global-set-key (kbd "\C-x\C-k") 'kill-region)
(global-set-key (kbd "\C-c\C-k") 'kill-region)

(global-set-key (kbd "C-<up>") 'text-scale-increase)
(global-set-key (kbd "C-<down>") 'text-scale-decrease)
(global-set-key (kbd "C-<wheel-up>") 'text-scale-increase)
(global-set-key (kbd "C-<wheel-down>") 'text-scale-decrease)

(global-set-key (kbd "C-c r") 'comment-region)
(global-set-key (kbd "C-c u") 'uncomment-region)

(global-set-key (kbd "C-x a") 'define-global-abbrev)

(global-set-key (kbd "C-c l") 'org-store-link)

(global-set-key (kbd "C-x C-<up>") 'windmove-up)
(global-set-key (kbd "C-x C-<down>") 'windmove-down)
(global-set-key (kbd "C-x C-<left>") 'windmove-left)
(global-set-key (kbd "C-x C-<right>") 'windmove-right)

(global-set-key (kbd "\M-?") 'help-command)
(global-set-key (kbd "<f1>") 'enlarge-window)
(global-set-key (kbd "<f2>") 'shrink-window)
(global-set-key (kbd "<f3>") 'shrink-window-horizontally)
(global-set-key (kbd "<f4>") 'enlarge-window-horizontally)
;; (global-set-key (kbd "<f5>") 'org-copy-subtree) ;; i custom.el
(global-set-key (kbd "<f9>") 'calc)
(global-set-key (kbd "<f11>") 'describe-function)
(global-set-key (kbd "<f12>") '(lambda ()
				 (interactive)
				 (popup-menu 'yank-menu)))
#+end_src

