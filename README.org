#+title: konfigurering av emacs#+startup: overview#+startup: num* Pakker og konfigurarsjonsfilerKonfigurasjon knyttet til moduler og pakker.** Pakkearkiv#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/pakker.el"  (setq package-enable-at-startup nil)  (cond ((eq system-type 'windows-nt) (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/"))))        ((eq system-type 'gnu/linux) (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")                                                              ;; ("marmalade" . "https://marmalade-repo.org/packages/")                                                              ("org" . "https://orgmode.org/elpa/")                                                              ("melpa" . "https://melpa.org/packages/")                                                            ))))#+end_src** [[https://github.com/jwiegley/use-package][use-package]]*** BeskrivelseDenne pakken er laget for det å samle konfigurasjon knyttet til en pakke, og på det viset legge opp til en ryddigere konfigurasjonfil, og man kan kontrollere lasting av pakker slik at man kan korte ned på oppstartstid for emacs.1) :init sørger for at kode eksekveres før pakken lastes2) :config sørger for at kode eksekveres etter at pakken har lastet3) :bind sørger for knytning av tastesekvens til kommando (tar liste eller liste med liste)4) :commands generer en autolasting for gitte kommandoer og utsetter lasting av modul til den brukes5) :hook6) :custom7) :custom-face8) :if9) :disabled dersom man ønsker å slå av en modul man har problemer med.*** Konfig#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/pakker.el"  (eval-when-compile    (require 'use-package))  (setq use-package-always-ensure t        ;; use-package-always-ensure t        use-package-verbose nil        use-package-expand-minimally t        use-package-enable-imenu-support t              )#+end_src** Quelpa*** BeskrivelseDette er en pakke som brukes for å bygge pakker fra lokal eller ekstern kilde. quelpa funksjonen nederst som viser til "https://GitHub.com/l3kn/org-fc" (dette er org flashcards) er jeg litt usikker hvorfor jeg har lagt inn, jeg kan ikke huske når denne kom til verden. og reelt sett så skulle vel denne kommandoen kjøres kun en gang i det at man neppe trenger å laste ned org-flash hver gang man starter opp emacs.*** Konfig#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/pakker.el"  (unless (package-installed-p 'quelpa)    (with-temp-buffer      (url-insert-file-contents "https://raw.GitHubusercontent.com/quelpa/quelpa/master/quelpa.el")      (eval-buffer)      (quelpa-self-upgrade)))  ;; (quelpa '(discover-my-major :fetcher git :url "https://GitHub.com/l3kn/org-fc"))#+end_src** Automatisk oppdateringfor periodisk, automatisk oppdatering av emacs-pakker. denne fant jeg i dave wilson sin youtube-snutt https://www.youtube.com/watch?v=dtjq68f2dxw&t=839s.#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/pakker.el"  (use-package auto-package-update    :defer t    :custom    (auto-package-update-interval 14)    (auto-package-update-prompt-before-update t)    (auto-package-update-hide-results t)    :config    (auto-package-update-maybe)    (auto-package-update-at-time "09:00")    )#+end_src** Lasting av konfigurasjonsfilDette er en egendefinert funksjon som jeg fant på en side med Emacs-konfigurering. Formålet med denne er å kunne laste .emacs raskt ved hjelp av noen enkle tastetrykk. [[https://gitlab.com/Kaligule/emacs-config/-/blob/master/config.org][Kaligule]].#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/pakker.el"  (defun load-dot-emacs ()    (interactive)    (load-file "~/.emacs")    (princ "dot-emacs has loaded"))  (global-set-key (kbd "C-x <f1>") 'load-dot-emacs)#+end_src* Utseende** MenyJeg synes at menyer generelt sett i emacs gir visuell støy. og hva oppstartsbeskjeder angår så forstår jeg lite av disse. derfor slår jeg av det meste. #+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"    (when window-system      (tooltip-mode -1)      (tool-bar-mode -1)      (menu-bar-mode -1)      (scroll-bar-mode -1))  (setq inhibit-startup-message t)  ;; (set-fringe-mode 0)  (setq visible-bell t)  (global-visual-line-mode t)  (display-time-mode 1)#+end_src** maskinspesifik generell konfigurasjon*** basis font#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"  (cond ((eq system-type 'windows-nt) (set-frame-font "consolas-14"))        ((string= system-name "mbell") (set-frame-font "liberation mono-14"))        ((string= system-name "kbell") (set-frame-font "liberation mono-11"))        ((string= system-name "nyvaar") (set-frame-font "liberation mono-10")))#+end_src** doom modeline#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"(use-package doom-modeline    :ensure t    :init (doom-modeline-mode 1)    :hook (after-init . doom-modeline-init)    :config (setq doom-modeline-bar-height 25                  doom-modeline-bar-width 3                  doom-modeline-buffer-encoding t                  doom-modeline-workspace-name t		  doom-modeline-major-mode-icon t		  doom-modeline-buffer-state-icon t		  doom-modeline-buffer-modification-icon t		  doom-modeline-modal-icon t		  doom-modeline-env-python-executable "python"		  doom-modeline-icon (display-graphic-p)))  ;; (use-package doom-themes  ;;   :init (load-theme 'doom-palenight t))#+end_src** Vis "trailing whitespace"#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el";; (setq-default show-trailing-whitespace t)#+end_src* ForskjelligEn samling av ulik konfigurasjon knyttet til hvordan emacs ser ut og hvordan emacs generelt fungerer.** Forskjellig#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"  (put 'downcase-region 'disabled nil)  (set-language-environment "utf-8")  (require 'rainbow-delimiters)  ;; (rainbow-delimiters-mode 1);; (require 'openwith);; (openwith-mode t);; (setq openwith-associations '(("\\.pdf\\'" "qpdfview" (file))))#+end_src** Tekstkontroll*** forkortelser#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"(setq abbrev-file-name "~/.emacs.d/abbrev_defs")(setq save-abbrevs 'silent)(setq-default abbrev-mode t)#+end_src*** tekstmarkering#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"    ;; (use-package hi-lock    ;;   :defer t    ;;   :bind (("M-o l" . highlight-lines-matching-regexp)    ;;          ("M-o r" . highlight-regexp)    ;;          ("M-o w" . highlight-phrase)))#+end_src** Oppstart av emacs#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"(emacs-init-time);; use a hook so the message doesn't get clobbered by other messages.(add-hook 'emacs-startup-hook          (lambda ()            (message "emacs ready in %s with %d garbage collections."                     (format "%.2f seconds"                             (float-time                              (time-subtract after-init-time before-init-time)))                     gcs-done)))(setq gc-cons-threshold (* 50 1000 1000))#+end_src** Legg til når emacs lasterdenne filen har jeg lastet ned i fra GitHub og det er noe jeg trenger for å få org-babel til å kjøre programmeringsspråket racket.#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"(add-to-list 'load-path "~/.emacs.d/emacs-ob-racket-master/")#+end_src** Stavekontroll#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"  (setq ispell-program-name "hunspell")        ;; ispell-hunspell-dict-path-alist '((/usr/share/doc/hunspell-no))#+end_src** Lese inn igjen fra diskJeg sender ofte filer fra maskin til masking i løpet av dagen og da er det greit at Emacs alltid leser siste versjon nedlastet fil. Denne konfigureringen har hjulpet meg spesielt i bruken av org-agenda. #+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"(global-auto-revert-mode t)#+end_src** command-log-mode#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/generelt.el"  (use-package command-log-mode    :defer t    :bind    ("C-c <f10>" . clm/toggle-command-log-buffer)    :config    (global-command-log-mode t))#+end_src* [[https://company-mode.github.io/][company-mode]]** BeskrivelseRammeverk for kompletering av tekst. Navnet står for "complete anything".** Konfig#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/helm-konf.el"(add-hook 'after-init-hook 'global-company-mode)(use-package company  :commands (company-mode	     company-complete-common	     company-complete-selection	     helm-company)  :init (setq company-minimum-prefix-length 3	      company-require-match nil	      company-selection-wrap-around t	      company-dabbrev-downcase t	      company-tooltip-limit 20	      company-tooltip-minimum-width 15	      company-tooltip-align-annotations 1)  :config (setq company-idle-delay 1000		company-minimum-prefix-length 3)  (global-company-mode))      #+end_src* [[https://github.com/abo-abo/swiper-helm/blob/master/swiper-helm.el][Swiper-Helm]]#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/helm-konf.el"(use-package swiper-helm  :ensure t  :bind ("C-s" . swiper-helm))#+end_src* [[https://emacs-helm.github.io/helm/#introduction][Helm]]** BeskrivelsePakke som lager et rammeverk for søking og innsnevring av valg og for det å fullføre navn på filer og kommandoer og så videre.** KonfigAlt av dette har jeg kopiert. Må gjøre endringer slik det blir mer tilpasset min bruk, og lage et hydra-oppsett slik at jeg får et nærere forhold til all funksjonalitet som ligger i pakken.#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/helm-konf.el"  (use-package helm    :ensure t    :bind (           ;; ("M-x" . helm-m-x)           ("C-x c-f" . helm-find-files)           ("C-x f" . helm-recentf)           ("M-y" . helm-show-kill-ring)           ("C-x b" . helm-buffers-list)           ("C-x c y" . helm-yas-complete)           ("C-x c y" . helm-yas-create-snippet-on-region)           ("C-c h o" . helm-occur)           ("C-c h x" . helm-register)           ("C-c <f9>" . helm-calcul-expression)           ("C-c <f1>" . helm-colors)           ("M-p" . helm-previous-line)           ("M-k" . helm-next-line)           ("M-i" . helm-previous-page)           ("M-k" . helm-next-page)           ;; ("M-h" . helm-beginning-of-buffer)           ;; ("M-h" . helm-end-of-buffer)           )    :init    (setq helm-buffers-lazy-matching t          helm-recentf-fuzzy-match t          helm-locate-fuzzy-match t          helm-split-window-in-side-p t          helm-lisp-fuzzy-completion t          helm-autoresize-max-height 0          helm-autoresize-min-height 20)    :config    (ido-mode -1)    (helm-mode 1)    (helm-autoresize-mode 1))  (when (eq system-type 'gnu/linux) (use-package helm-ls-git                                      :after helm                                      :bind (("C-x C-d" . helm-browse-project)                                             ("C-x r p" . helm-projects-history))))(use-package helm-rg  :ensure t  :config  ;; Add actions for inserting org file link from selected match  (defun insert-org-mode-link-from-helm-result (candidate)    (interactive)    (with-helm-current-buffer      (insert (format "[[file:%s][%s]]"                      (plist-get candidate :file)                      ;; Extract the title from the file name                      (subst-char-in-string                       ?_ ?\s                       (first                        (split-string                         (first                          (last                           (split-string (plist-get candidate :file) "\\-")))                         "\\.")))))))  (helm-add-action-to-source "Insert org-mode link"                             'insert-org-mode-link-from-helm-result                             helm-rg-process-source))#+end_src* multiple-cursors** BeskrivelseBruk av flere markører over flere linjer. Problemet med denne er at jeg ikke får godt til å knytte kommandoer opp mot tastatursekvenser, og det er mulig dette har noe med konflikter mellom pakker å gjøre. Om så er, funksjonene kan jeg likevel bruke fra M-x+kommando.** Konfig#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/flere-markører.el"    (use-package multiple-cursors      :defer t      :bind      (       ("C-c m t" . mc/mark-all-like-this)       ("C-c m l" . mc/edit-lines)       ("C-c m e" . mc/edit-end-of-lines)       ("C-c m a" . mc/edit-beginning-of-lines)       ("C-c m n" . mc/edit-next-line-like-this)       ("C-c m p" . mc/edit-previous-like-this)       ("C-c m r" . set-rectangular-region-anchor)))#+end_src* Programmering** Python#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/programmering.el"    ;; (setq python-shell-completion-native-enable nil)  (setq org-src-preserve-indentation t)  (setq python-shell-interpreter "/home/bw/anaconda3/bin/python3")#+end_src** Racket#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/programmering.el"    (use-package racket-mode      :defer t      :config      (when (eq system-type 'windows-nt) ((setq racket-racket-program "c:\\program files\\racket\\racket.exe"                                                racket-raco-program "c:\\program files\\racket\\raco.exe"))))  ;; (require 'ob-racket)#+end_src** SQLite#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/programmering.el"  (setq sql-sqlite-program "/home/bwarland/anaconda3/bin/sqlite3")#+end_src* Org-modeAlle moduler og pakker som har med org-mode å gjøre. Svært mye av min org-mode konfigurering kommer i fra [[http://doc.norang.ca/org-mode.html][Bernt Hansen sin konfigurasjonsfil]].** Beskrivelse*** genereltDe moduler og pakker som har med org-mode å gjøre. Generelt sett så kunne det vært hensiktsmessig å samle alle disse i en "use-package", og det har jeg forøvrig på Windows-maskinen, men jeg ser nytte i å dele opp over flere mindre moduler. ** Konfig*** GenereltDet meste av det som ligger her har jeg hentet i fra Bernt Hansen sin konfigurasjon, dvs. det som ligger under setq-remsen.#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"(use-package org  :mode (("\\.org$" . org-mode))  :hook (org-mode . org-bullets-mode)  :bind  (("C-c o" . 'org-mode)   ("C-c c" . 'org-capture)   ("<f5>" . 'org-copy-subtree)   ("C-c a" . 'org-agenda)   ("C-c l" . 'org-store-link)   ("C-c C-." . org-time-stamp)   ("C-c C-t". 'org-todo)		;   ("C-c t" . 'org-show-todo-tree)   ("C-c C-w" . 'org-capture-refile)   ("C-c C-k" . 'org-capture-kill))  :config  (setq initial-major-mode 'org-mode	org-hide-leading-stars t	org-startup-indented t	org-startup-folded t	org-pretty-entities t	org-pretty-entities-include-sub-superscripts t	org-treat-s-cursor-todo-selection-as-state-change nil	org-directory "~/GitHub"	org-reverse-note-order nil	org-refile-use-outline-path t	org-outline-path-complete-in-steps nil	org-refile-allow-creating-parent-nodes (quote confirm)	org-indirect-buffer-display 'current-window	org-hide-emphasis-markers t	org-tags-column -50	org-ellipsis " ..."                  ))  (cond ((eq system-type 'windows-nt) (setq org-archive-location "~/c:users/bjorwa/Documents/org-arkiv/arkiv.org::* task"))        ((eq system-type 'gnu/linux) (setq org-archive-location "~/Documents/org-arkiv/arkiv.org::* task")))(require 'org-id)(setq org-id-track-globally t)(setq org-agenda-files (directory-files-recursively "~/GitHub/Notater/" "\\.org$"))#+end_src** Startmappe#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el" (cond ((eq system-type 'windows-nt) (setq default-directory "~/c:users/bjorwa/documents/GitHub/"))      ((eq system-type 'gnu/linux) (setq default-directory "~/GitHub/")))#+end_src** Agenda*** Agenda-filesDisse kan man legge automatisk inn i .emacs med kommandoen c-[ (og ta ut med c-]). men jeg ser behov for å kunne ha et samlet syn på dette på tvers av tre maskiner (to linux-maskiner og en windows-maskin).#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/agenda-files.el"(setq org-agenda-files (directory-files-recursively "~/GitHub/Notater/" "\\.org$"))#+end_src*** Org-agendaIngen endring mulig i agendabuffer, men man kan gå fra agendabuffer til filene som det henvises til, og det er mulig å endre disse filene fra agendabufferen.Dersom man ønkser å beholde vindusoppsettet slik man har det når man påkaller agendabufferen så må man sette følgende variabel: (setq org-agenda-window-setup 'current-buffer).Det er ryddig å se todo i sammenheng med "scheduled:" og "deadline:" ellers så risikerer man at hele todo-listen blir kleiset rett inn under "time-grid", dvs. når man bruker aktiv data. #+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-agenda.el"  (setq org-agenda-columns t        org-agenda-tags-column -100        org-agenda-include-deadlines t        org-agenda-compact-blocks t        org-agenda-block-seperator t        org-agenda-span 5        org-agenda-window-setup 'other-window        org-agenda-start-with-log-mode t        org-agenda-log-done 'note        org-agenda-log-into-drawer t        org-agenda-include-diary t        org-agenda-skip-scheduled-if-done t        org-agenda-skip-deadline-if-done t        org-agenda-use-time-grid t        org-agenda-sticky t        org-agenda-time-grid (quote ((daily today remove-match)                                     (0600 0800 1000 1200 1400 1600 1800)                                     "      " "................")))(add-hook 'after-init-hook 'org-agenda-list)#+end_src*** [[https://GitHub.com/alphapapa/org-super-agenda][Org-super-agenda]] #+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-agenda.el"(require 'org-super-agenda)(use-package org-super-agenda  :ensure t  :config  (org-super-agenda-mode 1)  (setq org-super-agenda-groups        '((:name "================================TIDSPLAN================================================================"                 :time-grid t)          (:name "================================SORTERING OG ENKLE GJØREMÅL============================================="                 :todo "TODO")		 (:name "================================BEARBEIDING============================================================"			:todo "NEXT")		 (:name "++++++++++++++++++++++++++++++++TERPING++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"			:tag ("informatikk" "emacs" "git" "linux" "scheme" "python" "samfunn" "økonomi"))		 )))#+end_src** Filer mye brukt i omarkivering#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el";; (let ((wp "~/:c/users/bjorwa/documents/GitHub/Markedsanalyse/journaler/");;       (lp "~/GitHub/Markedsanalyse/journaler/"))(setq org-refile-targets (quote (("~/GitHub/Markedsanalyse/journaler/cn.org" :maxlevel . 5)				 ("~/GitHub/Markedsanalyse/journaler/hydrogen.org" :maxlevel . 3))))(advice-add 'org-refile :after 'org-save-all-org-buffers);; (let ((wp "~/:c/users/bjorwa/documents/GitHub/Markedsanalyse/journaler/");;       (lp "~/GitHub/Markedsanalyse/journaler/"));;   (cond ((eq system-type 'windows-nt);;          (setq org-refile-targets (quote (((concat wp "arkiv.org") :maxlevel . 2);;                                           ((concat wp "liq.org") :maxlevel . 4);;                                           ((concat wp "reg.org") :maxlevel . 4);;                                           ((concat wp "master-energi.org.org") :maxlevel . 4)))));;         ((eq system-type 'gnu/linux);;          (setq org-refile-targets (quote (((concat lp "arkiv.org") :maxlevel . 2);;                                           ((concat lp "liq.org") :maxlevel . 2);; 					  ((concat lp "cn.org") :maxlevel .3);; 					  ((concat lp "hydrogen.org") :maxlevel . 2);;                                           ((concat lp "reg.org") :maxlevel . 2);;                                           ((concat lp "master-energi.org.org") :maxlevel . 4)))))));; (advice-add 'org-refile :after 'org-save-all-org-buffers)#+end_src** Hydra#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"  ;; (require 'org-fc-hydra)#+end_src** Maler*** FangstmalerJeg bruker mange av disse fangstmalene både i arbeid og privat da det er noe som hjelper meg å samle, fange og lagre informasjon raskt. dette viser også konfigureringen, skjønt det kan bli noe graps i koden. #+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"(cond ((eq system-type 'windows-nt)       (setq org-capture-templates             (quote (                     ;; ("d" "drill/emner")                     ;; ("db" "powerbi" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "powerbi")                     ;;  "** %? :drill:power_bi:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dd" "database" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "database")                     ;;  "** %? :drill:db:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("de" "emacs config" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "emacs")                     ;;  "** %? :drill:emacs:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dg" "GitHub" entry (file+olp "~/c:/users/bjorwa/documents/GitHub/Notater/informatikk.org" "git")                     ;;  "** %? :drill:git:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("di" "informatikk" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "informatikk")                     ;;  "** %? :drill:informatikk:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dl" "linux" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "linux")                     ;;  "** %? :drill:linux:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dn" "numpy" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "numpy")                     ;;  "** %? :drill:python:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("do" "office" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "office")                     ;;  "** %? :drill:office:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dp" "pandas" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "pandas")                     ;;  "** %? :drill:python:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dp" "python" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "python")                     ;;  "** %? :drill:python:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dr" "racket" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "racket")                     ;;  "** %? :drill:scheme:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dx" "excel" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/informatikk.org" "racket")                     ;;  "** %? :drill:excel:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("f" "fortelling og retorikk")                     ;; ("ff" "fortelling" entry (file+olp "~c:/users/bjorwa/documents/GitHub/Notater/forret.org" "fortelling")                     ;;  "* %?\n")                     ;; ("fr" "retorikk" entry (file+olp "~c:/users/bjorwa/documents/GitHub/Notater/forret.org" "retorikk")                     ;;  "* %?\n")                     ("h" "handling/gjøremål")                     ("hg" "gjøremål" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/moeter.org" "gjøremål")                      "* todo %?\n%^t")                     ("hm" "møter" entry (file+olp "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/moeter.org" "møter")                      "* %?\n%^t")                     ("j" "Journal/føring")                     ("jd" "dagbok" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub//GitHub/Journal/dagbok.org")                      "* %?\n")                     ("jf" "fundamentals" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub//GitHub/Markedsanalyse/journaler/fundamentals.org")                      "")                     ("jF" "ferdigheter" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/ferdigheter.org")                      "* %?\n")                     ("jj" "Journal" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub//GitHub/Markedsanalyse/journaler/Journal.org")                      "* %?\nhjlink")                     ("jr" "retorikk og kommunikasjon" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub/Journal/retorikk.org")                      "* %?\n")                     ("jø" "økonomi" entry (file+datetree+prompt "~/c:/users/bjorwa/documents/GitHub//GitHub/Notater/econ.org")                      ("t" "tabell")                      ("th" "handel" table-line (file+headline "~/notebook/markedsvurdering.org" "dagsrapport" "handel")                       "|%^u|%^{type}|%^{selger}|%^{kjøper}|%^{periode}|%^{incoterm}|%^{pris}|%^{kilde}|%^{kommentar}|")                      "* %?\n"))))       )      ((eq system-type 'gnu/linux)       (setq org-capture-templates             (quote (                     ;; ("d" "drill")                     ;; ("db" "powerbi" entry (file+olp "~/GitHub/Notater/informatikk.org" "powerbi")                     ;;  "** %? :drill:power_bi:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dd" "database" entry (file+olp "~/GitHub/Notater/informatikk.org" "database")                     ;;  "** %? :drill:db:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("de" "emacs config" entry (file+olp "~/GitHub/Notater/informatikk.org" "emacs")                     ;;  "** %? :drill:emacs:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dg" "GitHub" entry (file+olp "~/GitHub/Notater/informatikk.org" "git")                     ;;  "** %? :drill:git:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("di" "informatikk" entry (file+olp "~/GitHub/Notater/informatikk.org" "informatikk")                     ;;  "** %? :drill:informatikk:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dl" "linux" entry (file+olp "~/GitHub/Notater/informatikk.org" "linux")                     ;;  "** %? :drill:linux:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dn" "numpy" entry (file+olp "~/GitHub/Notater/informatikk.org" "numpy")                     ;;  "** %? :drill:python:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("do" "office" entry (file+olp "~/GitHub/Notater/informatikk.org" "office")                     ;;  "** %? :drill:office:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dp" "pandas" entry (file+olp "~/GitHub/Notater/informatikk.org" "pandas")                     ;;  "** %? :drill:python:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dp" "python" entry (file+olp "~/GitHub/Notater/informatikk.org" "python")                     ;;  "** %? :drill:python:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dr" "racket" entry (file+olp "~/GitHub/Notater/informatikk.org" "racket")                     ;;  "** %? :drill:scheme:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("ds" "samfunn" entry (file+olp "~/GitHub/Notater/samfunndrill.org" "begreper")                     ;;  "** %? :drill:samfunn:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ;; ("dx" "excel" entry (file+olp "~/GitHub/Notater/informatikk.org" "racket")                     ;;  "** %? :drill:excel:\n:properties:\n:drill_card_type: twosided\n:end:\n# ")                     ("f" "fortelling")                     ("ff" "fortelling" entry (file+olp "~/GitHub/Notater/forret.org" "fortelling")                      "* %?\n")                     ("fr" "retorikk" entry (file+olp "~/GitHub/Notater/forret.org" "retorikk")                      "* %?\n")                     ("h" "handling")                     ("hg" "gjøremål" entry (file+olp "~/GitHub/Notater/moeter.org" "gjøremål")                      "* todo %?\n%^t")                     ("hm" "møter" entry (file+olp "~/GitHub/Notater/moeter.org" "møter")                      "* %?\n%^t")                     ("j" "Journal")                     ("jd" "dagbok" entry (file+datetree+prompt "~/GitHub/Journal/dagbok.org")                      "* %?\n")                     ("jf" "fundamentals" entry (file+datetree+prompt "~/GitHub/Notater/journaler/fundamentals.org")                      "* ...%?\n* European Gas\n* US Gas\n* Crude Oil")                     ("jF" "ferdigheter" entry (file+datetree+prompt "~/GitHub/Notater/ferdigheter.org")                      "* %?\n")                     ("jj" "Journal" entry (file+datetree+prompt "~/GitHub/Notater/journaler/journal.org") ;                      "* TODO %?\nSCHEDULED: %t")                     ("jr" "retorikk" entry (file+datetree+prompt "~/GitHub/Journal/retorikk.org")                      "* %?\n")                     ("js" "samfunn" entry (file+datetree+prompt "~/GitHub/Journal/samfunn.org")                      "* %?\n")                     ("jt" "trening" entry (file+datetree+prompt "~/GitHub/Journal/trening.org")                      "* %?\n")                     ("jø" "økonomi" entry (file+datetree+prompt "~/GitHub/Journal/econ.org")                      "* %?\n")                     ("t" "tabell")                     ("ta" "price quote agencies" table-line (file+olp "~/GitHub/Markedsanalyse/journaler/LNG-daglig.org" "lng")                      "|%^u|%^{platts}|%^{argus}|%^{icis}|" :prepend t)		     ("th" "handel" table-line (file+olp "~/notebook/markedsvurdering.org" "dagsrapport" "handel")		      "|%^u|%^{type}|%^{selger}|%^{kjøper}|%^{sted}|%^{antall}|%^{periode}|%^{incoterm}|%^{pris}|%^{kilde}|%^{kommentar}|" :prepend t)		     ("tj" "JKM structure" table-line (file+olp "~/GitHub/Markedsanalyse/journaler/LNG-daglig.org" "LNG" "JKM-structure")		      "|%^u|%^{FM}|%^{p1}|%^{p2}|%^{p3}|%^{p4}|%^{comment}|" :prepend t)		     ("tk" "kontrakt" entry (file+olp "~/notebook/termin.org" "termin")		      "* %?\nzzkon" :prepend t)		     ("tp" "tender: purchase" table-line (file+olp "~/GitHub/Markedsanalyse/journaler/LNG-daglig.org" "LNG" "Tender: purchase")		      "| %^u |%^{buyer}|%^{location}|%^{number vessels}|%^{period month}|%^{term}|%^{source}|%^{comment}|" :prepend t)		     ("ts" "tender: sale" table-line (file+olp "~/GitHub/Markedsanalyse/journaler/LNG-daglig.org" "LNG" "Tender: sale")		      "| %^u |%^{seller}|%^{location}|%^{number vessels}|%^{period month}|%^{term}|%^{source}|%^{comment}|" :prepend t)                     ("tt" "trening" table-line (file+headline "~/GitHub/Journal/trening.org" "tabell")                      "|%^u|%^{type}|%^{oppvarming}|%^{runder}|%^{vekt}|%^{tid}|%^{kommentar}|")                     )))))#+end_src*** StrukturmalF.eks <pyt + tab vil eksandere til python med tangle.#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"(require 'org-tempo)(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))(add-to-list 'org-structure-template-alist '("elt" . "src emacs-lisp :tangle"))(add-to-list 'org-structure-template-alist '("py" . "src python"))(add-to-list 'org-structure-template-alist '("pyt" . "src python :tangle"))(add-to-list 'org-structure-template-alist '("sr" . "src racket"))(add-to-list 'org-structure-template-alist '("srt" . "src racket :tangle"))(add-to-list 'org-structure-template-alist '("sq" . "src sqlite"))#+end_src** Org-babel#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"  (org-babel-do-load-languages   'org-babel-load-languages (quote ((emacs-lisp . t)                                     ;; (racket . t)                                     (sqlite . t)                                     (python . t)                                     ;; (ipython .t)                                     )))  (setq org-babel-python-command "python3")#+end_srchttps://emacs.stackexchange.com/questions/28184/org-mode-how-can-i-point-to-python3-5-in-my-org-mode-doc** TerpingEn strukturert terping av viktig informasjon, metoder og teknikker er viktig for meg da jeg har en teflonhjerne som ikke raskt absorberer. Dette tror jeg er en pakke som ikke jevnlig oppdateres, om i det hele tatt. og her har jeg hatt litt problemer med en feilmelding og kluss med kode som jeg på et vil klarte å kontrollere ved å blokke ut noe av koden i modulens el-fil (laster denne inn i stedet for elc-filen, [[file:notater/ferdigheter.org::*feil under emacs-konfigurering][beskrivelse i filen ferdigheter.org]]).#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-konf.el"  (require 'org-drill)  (use-package org-drill    :ensure t    ;; https://gitlab.com/phillord/org-drill/    :config    (setq org-drill-maximum-duration 20          org-drill-spaced-repetition-algorithm 'sm2          org-drill-add-random-noise-to-intervals-p t          org-drill-adjust-intervals-for-early-and-late-repetitions-p t))#+end_src** TODO-nøkkelordNår man setter variabelen "org-use-fast-todo-selection" til "t" så vil man få en meny med todo-nøkkelord man kan velge i fra.Her tror jeg at jeg igjen vil se på Bernt Hansen sitt oppsett. En del av det jeg har nedenfor er ting jeg knapt bruker, og det kan være fornuftig av meg å innarbeide dette med sette på vent og det å kansellere. #+begin_src emacs-lisp :tangle orgtodo.el  (setq org-todo-fast-todo-selection t        org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAIT(w@/!)" "|" "DONE(d)" "CANC(c@)"))        org-todo-keyword-faces (quote (("TODO" :foreground "red" :background "white")                                       ;; ("FIN" :foreground "red" :background "white")   ;; utgår                                       ("NEXT" :foreground "blue" :background "white")                                       ;; ("PRAK" :foreground "blue" :background "white") ;; utgår                                       ("WAIT" :foreground "light slate grey" :background "white" :weight "bold") ;;utgår                                       ;; ("PRES" :foreground "dark turquoise" :background "white" :weight "bold")   ;;utgår                                       ;; ("BAL" :foreground "dark olive green" :background "white" :weight "bold")  ;;utgår                                       ("CANC" :foreground "dark olive green" :background "white" :weight "bold")  ;;utgår                                       ("DONE" :foreground "dark green" :background "white" :weight "bold"))))(setq org-log-done 'note)#+end_src* Org-roam** Beskrivelse og kilder*** [[https://www.youtube.com/watch?v=Lg61ocfxk3c][Making-Connections-in-your-Notes]]*** [[https://www.orgroam.com/manual.html#Org_002droam-Dailies][Org-Roam-User-Manual]]** konfigurering + package deft#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-roam.el"(use-package org-roam  :ensure t  :init  (setq org-roam-v2-ack t)  :custom  (org-roam-directory "~/GitHub/Notater/org-roam")  ;; (org-roam-completion-everywhere t)  (org-roam-dailies-directory "~/GitHub/Notater/daglig/")  :bind (("C-c n l" . org-roam-buffer-toggle)         ("C-c n f" . org-roam-node-find)         ("C-c n i" . org-roam-node-insert)         ("C-c n g" . org-roam-node-graph)         ("C-c n c" . org-roam-capture)	 ("C-c n r" . org-roam-node-random)         ("C-c b t" . org-roam-buffer-toggle)	 ("C-c d s" . org-roam-db-sync)	 ("C-c n j" . org-roam-dailies-capture-today)	 :map org-mode-map	 ("C-M-i" . completion-at-point)	 ("C-c n o" . org-id-get-create)         ("C-c n t" . org-roam-tag-add)	 )  :config  (org-roam-setup)  (org-roam-db-autosync-mode)  (require 'org-roam-protocol))(use-package helm-rg  :ensure t  :config  ;; Add actions for inserting org file link from selected match  (defun insert-org-mode-link-from-helm-result (candidate)    (interactive)    (with-helm-current-buffer      (insert (format "[[file:%s][%s]]"                      (plist-get candidate :file)                      ;; Extract the title from the file name                      (subst-char-in-string                       ?_ ?\s                       (first                        (split-string                         (first                          (last                           (split-string (plist-get candidate :file) "\\-")))                         "\\.")))))))  (helm-add-action-to-source "Insert org-mode link"                             'insert-org-mode-link-from-helm-result                             helm-rg-process-source));; (use-package graphviz-dot-mode;;   :ensure t);; (require 'company-org-roam)#+end_src* Hydra** eksempler#+begin_src emacs-lisp :tangle;; (defhydra hydra-zoom (global-map "<f2>");;   "zoom";;   ("g" text-scale-increase "in");;   ("l" text-scale-decrease "out"))(defhydra hydra-buffer-menu (:color pink                             :hint nil)  "^Mark^             ^Unmark^           ^Actions^          ^Search^^^^^^^^-----------------------------------------------------------------_m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch_s_: save          _U_: unmark up     _b_: bury          _I_: isearch_d_: delete        ^ ^                _g_: refresh       _O_: multi-occur_D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only_~_: modified"  ("m" Buffer-menu-mark)  ("u" Buffer-menu-unmark)  ("U" Buffer-menu-backup-unmark)  ("d" Buffer-menu-delete)  ("D" Buffer-menu-delete-backwards)  ("s" Buffer-menu-save)  ("~" Buffer-menu-not-modified)  ("x" Buffer-menu-execute)  ("b" Buffer-menu-bury)  ("g" revert-buffer)  ("T" Buffer-menu-toggle-files-only)  ("O" Buffer-menu-multi-occur :color blue)  ("I" Buffer-menu-isearch-buffers :color blue)  ("R" Buffer-menu-isearch-buffers-regexp :color blue)  ("c" nil "cancel")  ("v" Buffer-menu-select "select" :color blue)  ("o" Buffer-menu-other-window "other-window" :color blue)  ("q" quit-window "quit" :color blue))(define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)#+end_src** hyroam#+begin_src emacs-lisp (defhydra hyroam (:color blue		      :hint nil)"^capture and tags^     ^dailies^                ^buffer and search^^^^^^^^^-----------------------------------------------------------------c: capture-node  d: dailies-capture-today    T: buffer-togglet: add-tag       f: dailies-find-directory   R: randomr: remove-tag    g: dailies-goto-today       _"("c" org-roam-capture :color blue)("t" org-roam-tag-add)("r" org-roam-tag-remove)("d" org-roam-dailies-capture-today)("f" org-roam-find-directory)("g" org-roam-goto-today)("T" org-roam-buffer-toggle)("R" org-roam-node-random)("C" nil "cancel")("V" Buffer-menu-select "select" :color blue)("o" Buffer-menu-other-window "other-window" :color blue)("q" quit-window "quit" :color blue))(global-set-key (kbd "C-c <f6>") 'hyroam/body);; (define-key Buffer-menu-mode-map "S-<space>" 'hydra-roam/body)  #+end_src** hyagenda#+begin_src emacs-lisp#+end_src** hyhelm#+begin_src emacs-lisp(defhydra hyhelm (:color pink :hint nil)  ("f" helm-find-files "find files")  ("y" helm-show-kill-ring "kill ring")  ("b" helm-buffers-list "buffer list")  ("r" helm-register "register")  ("k" helm-calcul-expression "calc")  ("c" helm-colors "colors")  ("B" helm-beginning-of-buffer "beginning")  ("E" helm-end-of-buffer "end"))#+end_src* Deft#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/org-roam.el"(use-package deft    :config    (setq deft-directory org-directory          deft-recursive t          deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"          deft-use-filename-as-title t)    :bind    ("C-c n d" . deft)    ("C-c <f9>" . deft-filter))#+end_src* Yasnippet-maler** yasnippet#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/maler.el"  (use-package yasnippet    :ensure t    :diminish yas-minor-mode    :init (yas-global-mode)    :config    (yas-global-mode)    (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)    (setq yas-key-syntaxes '("w_" "w_." "^ "))  ;;    (setq yas-installed-snippets-dir "~/elisp/yasnippet-snippets")    (setq yas-expand-only-for-last-commands nil)    (yas-global-mode 1)    (bind-key "\t" 'hippie-expand yas-minor-mode-map)    (add-to-list 'yas-prompt-functions 'shk-yas/helm-prompt)    (global-set-key (kbd "C-c y") (lambda () (interactive)                                    (yas/load-directory "~/elisp/snippets"))))#+end_src* Register** Linux#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/linreg.el"(set-register ?D '(file . "~/GitHub/Journal/dagbok.org"))(set-register ?d '(file . "~/GitHub/Notater/journaler/LNG-daglig.org"))(set-register ?t '(file . "~/GitHub/Journal/trening.org"))(set-register ?c '(file . "~/GitHub/emacs-config/custom.el"))(set-register ?g '(file . "~/GitHub/"))(set-register ?o '(file . "~/GitHub/Journal/econ.org"))(set-register ?f '(file . "~/GitHub/Notater/journaler/fundamentals.org"))(set-register ?F '(file . "~/GitHub/Notater/ferdigheter.org"))(set-register ?k '(file . "~/GitHub/emacs-config/README.org"))(set-register ?i '(file . "~/GitHub/Notater/informatikk.org"))(set-register ?j '(file . "~/GitHub/Notater/journaler/journal.org"))(set-register ?l '(file . "~/GitHub/Notater/journaler/liq.org"))(set-register ?r '(file . "~/GitHub/Notater/journaler/reg.org"))(set-register ?e '(file . "~/.emacs"))#+end_src** Windows                              :ARCHIVE:#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/winreg.el"  (set-register ?c '(file . "~/.emacs.d/custom.el"))  (set-register ?j '(file . "c:\\users\\bjorwa\\documents\\GitHub\\Markedsanalyse\\journaler\\journal.org"))  (set-register ?f '(file . "c:\\users\\bjorwa\\documents\\GitHub\\Markedsanalyse\\journaler\\fundamentals.org"))  (set-register ?l '(file . "c:\\users\\bjorwa\\documents\\GitHub\\Markedsanalyse\\journaler\\liq.org"))  (set-register ?l '(file . "c:\\users\\bjorwa\\documents\\GitHub\\Markedsanalyse\\journaler\\reg.org"))  (set-register ?v '(file . "c:\\users\\bjorwa\\documents\\GitHub\\Markedsanalyse\\journaler\\vedlikehold.org"))  (set-register ?o '(file . "c:/users/bjorwa/appdata/roaming/notebook/oversikt.org"))  (set-register ?m '(file . "c:/users/bjorwa/appdata/roaming/notebook/markedsvurdering.org"))  (set-register ?p '(file . "c:/users/bjorwa/appdata/roaming/notebook/prices.org"))  (set-register ?d '(file . "c:\\users\\bjorwa\\desktop\\"))  (set-register ?g '(file . "c:\\users\\bjorwa\\documents\\GitHub\\"))#+end_src* TastebindingSamling av kommandoer og tastebindinger som ikke nødvendigvis knyttes mot en emacs-pakke.#+begin_src emacs-lisp :tangle "~/GitHub/emacs-config/gkb.el"(global-set-key (kbd "\C-x\C-k") 'kill-region)(global-set-key (kbd "\C-c\C-k") 'kill-region)(global-set-key (kbd "M-j") 'join-line)(global-set-key (kbd "C-<up>") 'text-scale-increase)(global-set-key (kbd "C-<down>") 'text-scale-decrease)(global-set-key (kbd "C-<wheel-up>") 'text-scale-increase)(global-set-key (kbd "C-<wheel-down>") 'text-scale-decrease)(global-set-key (kbd "C-c r") 'comment-region)(global-set-key (kbd "C-c u") 'uncomment-region)(global-set-key (kbd "C-x a") 'define-global-abbrev)(global-set-key (kbd "C-c l") 'org-store-link)(global-set-key (kbd "C-x C-<up>") 'windmove-up)(global-set-key (kbd "C-x C-<down>") 'windmove-down)(global-set-key (kbd "C-x C-<left>") 'windmove-left)(global-set-key (kbd "C-x C-<right>") 'windmove-right)(global-set-key (kbd "\M-?") 'help-command)(global-set-key (kbd "<f1>") 'enlarge-window)(global-set-key (kbd "<f2>") 'shrink-window)(global-set-key (kbd "<f3>") 'shrink-window-horizontally)(global-set-key (kbd "<f4>") 'enlarge-window-horizontally);; (global-set-key (kbd "<f5>") 'org-copy-subtree) ;; i custom.el(global-set-key (kbd "<f9>") 'calc)(global-set-key (kbd "<f11>") 'describe-function)(global-set-key (kbd "<f12>") '(lambda ()				 (interactive)				 (popup-menu 'yank-menu)))(global-set-key (kbd "C-x <f12>") 'org-drill)(global-set-key (kbd "C-c w") 'whitespace-cleanup)(global-set-key (kbd "C-q") 'kill-this-buffer)#+end_src